{"version":3,"sources":["components/AddCategory/index.js","helpers/getGifs.js","components/GifGridItem/index.js","components/GifGrid/index.js","hooks/useFechGifs.js","components/GifExpertApp/index.js","index.js"],"names":["AddCategory","addCategFunc","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","c","reverse","type","value","onChange","target","handleInputValueChange","getGifs","category","a","url","encodeURI","console","log","fetch","resp","json","data","gifs","map","g","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","setTimeout","useFechGifs","img","GifExpertApp","props","categories","setCategories","i","ReactDOM","render","document","getElementById"],"mappings":"0QAMaA,EAAc,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aAAmB,EACTC,mBAAS,IADA,mBACtCC,EADsC,KAC1BC,EAD0B,KAgB7C,OACI,sBAAMC,SAVW,SAACC,GAClBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAa,SAACS,GAAD,MAAO,sBAAIA,GAAJ,CAAOP,IAAYQ,aACvCP,EAAc,MAKlB,SACI,uBAAOQ,KAAK,OAAOC,MAAOV,EAAYW,SAAU,SAACR,GAAD,OAfzB,SAACA,GAC5BF,EAAcE,EAAES,OAAOF,OAcoCG,CAAuBV,S,+BCxB7EW,EAAO,uCAAG,WAAOC,GAAP,qBAAAC,EAAA,6DACbC,EADa,0FAC4EC,UAAUH,GADtF,YAEnBI,QAAQC,IAAIH,GAFO,SAGAI,MAAMJ,GAHN,cAGbK,EAHa,gBAIAA,EAAKC,OAJL,cAIbC,EAJa,OAMbC,EAAOD,EAAKA,KAAKE,KAAI,SAACC,GAAO,IAAD,EAC9B,MAAO,CACHC,GAAID,EAAEC,GACNC,MAAOF,EAAEE,MACTZ,IAAG,UAAEU,EAAEG,cAAJ,aAAE,EAAUC,iBAAiBd,QAVrB,kBAcZQ,GAdY,4CAAH,sDCEPO,G,MAAc,SAAC,GAAuB,EAArBJ,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOZ,EAAU,EAAVA,IACrC,OACI,sBAAKgB,UAAU,sDAAf,UACI,4BAAIJ,IACJ,qBAAKK,IAAKjB,EAAKkB,IAAKN,SCDnBO,G,MAAU,SAAC,GAAkB,IAAhBrB,EAAe,EAAfA,SAAe,ECFd,SAACA,GAAc,IAAD,EACXhB,mBAAS,CAC/ByB,KAAM,GACNa,SAAS,IAHwB,mBAC9BC,EAD8B,KACvBC,EADuB,KAiBrC,OAXAC,qBAAU,WACN1B,EAAQC,GAAU0B,MAAK,SAAClC,GACpBmC,YAAW,WACPH,EAAS,CACLf,KAAMjB,EACN8B,SAAS,MAEd,UAER,CAACtB,IAEGuB,EDd2BK,CAAY5B,GAAhCe,EADuB,EAC7BN,KAAca,EADe,EACfA,QAEtB,OACI,gCACI,6BAAKtB,IAEJsB,GAAW,2CAEZ,qBAAKJ,UAAU,YAAf,SACKH,EAAOJ,KAAI,SAACkB,GACT,OAAO,cAAC,EAAD,eAA8BA,GAAZA,EAAIhB,cEMlCiB,EAjBM,SAACC,GAAW,IAAD,EACQ/C,mBAAS,IADjB,mBACrBgD,EADqB,KACTC,EADS,KAG5B,OACI,gCACI,8CACA,cAAC,EAAD,CAAalD,aAAckD,IAE3B,uBAECD,EAAWrB,KAAI,SAACX,EAAUkC,GAAX,OACZ,cAAC,EAAD,CAAiBlC,SAAUA,GAAbkC,U,MCV9BC,IAASC,OAAO,cAAC,EAAD,IAAkBC,SAASC,eAAe,W","file":"static/js/main.f2d475bd.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport \"./index.css\";\r\n\r\nexport const AddCategory = ({ addCategFunc }) => {\r\n    const [inputValue, setInputValue] = useState(\"\");\r\n\r\n    const handleInputValueChange = (e) => {\r\n        setInputValue(e.target.value);\r\n    };\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        if (inputValue.trim().length > 1) {\r\n            addCategFunc((c) => [...c, inputValue].reverse());\r\n            setInputValue(\"\");\r\n        }\r\n    };\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <input type=\"text\" value={inputValue} onChange={(e) => handleInputValueChange(e)} />\r\n        </form>\r\n    );\r\n};\r\n\r\nAddCategory.propTypes = {\r\n    addCategFunc: PropTypes.func.isRequired,\r\n};\r\n","export const getGifs = async (category) => {\r\n    const url = `https://api.giphy.com/v1/gifs/search?api_key=1JBruJvB2MOrpScRb8cO7NI8WRABi6ki&q=${encodeURI(category)}&limit=5`;\r\n    console.log(url);\r\n    const resp = await fetch(url);\r\n    const data = await resp.json();\r\n\r\n    const gifs = data.data.map((g) => {\r\n        return {\r\n            id: g.id,\r\n            title: g.title,\r\n            url: g.images?.downsized_medium.url,\r\n        };\r\n    });\r\n\r\n    return gifs;\r\n};\r\n","import \"./index.css\";\r\n\r\nexport const GifGridItem = ({ id, title, url }) => {\r\n    return (\r\n        <div className=\"card animate__animated animate__swing animate-delay\">\r\n            <p>{title}</p>\r\n            <img src={url} alt={title} />\r\n        </div>\r\n    );\r\n};\r\n","import React from \"react\";\r\nimport { useFechGifs } from \"../../hooks/useFechGifs\";\r\nimport { GifGridItem } from \"../GifGridItem/index\";\r\nimport \"./index.css\";\r\n\r\nexport const GifGrid = ({ category }) => {\r\n    const { data: images, loading } = useFechGifs(category);\r\n\r\n    return (\r\n        <div>\r\n            <h3>{category}</h3>\r\n\r\n            {loading && <p>Loading...</p>}\r\n\r\n            <div className=\"card-grid\">\r\n                {images.map((img) => {\r\n                    return <GifGridItem key={img.id} {...img} />;\r\n                })}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","import { useEffect, useState } from \"react\";\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\nexport const useFechGifs = (category) => {\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true,\r\n    });\r\n\r\n    useEffect(() => {\r\n        getGifs(category).then((c) => {\r\n            setTimeout(() => {\r\n                setState({\r\n                    data: c,\r\n                    loading: false,\r\n                });\r\n            }, 120);\r\n        });\r\n    }, [category]);\r\n\r\n    return state;\r\n};\r\n","import React from \"react\";\r\nimport { useState } from \"react\";\r\nimport { AddCategory } from \"../AddCategory/index\";\r\nimport { GifGrid } from \"../GifGrid\";\r\n\r\nconst GifExpertApp = (props) => {\r\n    const [categories, setCategories] = useState([]);\r\n\r\n    return (\r\n        <div>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory addCategFunc={setCategories} />\r\n\r\n            <hr />\r\n\r\n            {categories.map((category, i) => (\r\n                <GifGrid key={i} category={category} />\r\n            ))}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default GifExpertApp;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport GifExpertApp from \"./components/GifExpertApp/index\";\r\n\r\nimport \"./index.css\";\r\n\r\nReactDOM.render(<GifExpertApp />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}